<?xml version="1.0" encoding="utf-8"?>
<!--
~   Licensed under the Apache License, Version 2.0 (the "License");
~   you may not use this file except in compliance with the License.
~   You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~   Unless required by applicable law or agreed to in writing, software
~   distributed under the License is distributed on an "AS IS" BASIS,
~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~   See the License for the specific language governing permissions and
~   limitations under the License.
-->
<ruleset name="kitei-extended"
	     xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	     xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

  <description>
    Additional rules to annoy people who do not like final everywhere.
  </description>

  <rule ref="rulesets/java/controversial.xml/AvoidUsingNativeCode">
    <priority>5</priority>
  </rule>

  <rule ref="rulesets/java/controversial.xml/DontImportSun">
    <priority>5</priority>
  </rule>

  <!-- 
       for config magic, abstract classes without abstract methods are used
  -->
  <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod">
    <priority>5</priority>
  </rule>

  <!-- 
       While good to flag, failing the build on reusing a parameters is overkill.
       If this is unwanted, make the parameter final.
  -->
  <rule ref="rulesets/java/design.xml/AvoidReassigningParameters">
    <priority>5</priority>
  </rule>

  <!--
      Sometimes using a helper is useful for debugging.
  -->
  <rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn">
    <priority>5</priority>
  </rule>


  <!--
       Rewrite as utility classes.
  -->
  <rule ref="rulesets/java/design.xml/UseUtilityClass">
    <priority>5</priority>
  </rule>

  <!--
      yes, they should. However, rewriting every bit of existing code where they
      are not is harmful. So just flag them.
  -->
  <rule ref="rulesets/java/optimizations.xml/LocalVariableCouldBeFinal">
    <priority>5</priority>
  </rule>

  <rule ref="rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal">
    <priority>5</priority>
  </rule>

  <!--
      If the whole point of a loop is to instantiate objects, then this rule
      is pretty annoying...
  -->
  <rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops">
    <priority>5</priority>
  </rule>

  <!--
      technically correct (the best kind of correct) but nevertheless too anal.
  -->
  <rule ref="rulesets/java/optimizations.xml/RedundantFieldInitializer">
    <priority>5</priority>
  </rule>

  <!--
      Nothing wrong with a little syntactic sugar.
  -->
  <rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends">
    <priority>5</priority>
  </rule>

  <!--
      In 2015, the JVM will optimize that anyway. And it allows grouping of
      fields even if they are not used on any path.
  -->
  <rule ref="rulesets/java/optimizations.xml/PrematureDeclaration">
    <priority>5</priority>
  </rule>

  <!--
      Same as above, but unfortunately there is no method readily available
      to do the deed. Not even in Guava.
  -->
  <rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck">
    <priority>5</priority>
  </rule>

  <!--
      so I should memorize operator precedence to save key strokes? Really?
  -->
  <rule ref="rulesets/java/unnecessary.xml/UselessParentheses">
    <priority>5</priority>
  </rule>

  <!-- SafeVarargs annotation only works on final methods. -->
  <rule ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier">
    <priority>5</priority>
  </rule>

  <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter">
    <priority>5</priority>
  </rule>

  <rule ref="rulesets/java/unusedcode.xml/UnusedModifier">
    <priority>5</priority>
  </rule>
</ruleset>
